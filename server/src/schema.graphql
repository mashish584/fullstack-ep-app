scalar Upload

type Query {
  users: [User!]
  events(query: String, skip: Int, take: Int): EventPagination!
  eventDetail(slug: String!): Event!
}

type Mutation {
  createUser(data: CreateUserInput): SignupPayload!
  verifyUserEmail(username: String!, token: String!): VerificationPayload!
  userLogin(id: String!, password: String): AuthPayload!
  forgotPassword(email: String!): VerificationPayload!
  createEvent(data: CreateEventInput): Event
  uploadEventMedia(file: Upload!, eventId: Int!): Media!
  updateProfile(data: UpdateUserInput): User!
  bookEvent(event: String!): BookingPayload!
  createStripeCustomer: CreateCustomerPayload!
  addPaymentCard: AddPaymentCardPayload!
}

type User {
  id: ID!
  fullname: String!
  username: String!
  email: String!
  bio: String!
  profile: String!
  isActive: Boolean!
  createdAt: String!
  updatedAt: String!
}

type Media {
  id: ID!
  link: String!
  thumbnail: String!
  event: Event
  createdAt: String!
  updatedAt: String!
}

type Location {
  lat: String!
  lng: String!
  address: String!
}

type Event {
  id: ID
  title: String
  description: String
  category: [String]
  location: Location!
  eventTimestamp: String
  isActive: Boolean
  isFeatured: Boolean
  owner: User
  medias: [Media]
  price: Float
  createdAt: String
  updatedAt: String
}

type EventPagination {
  count: Int!
  events: [Event!]!
}

input CreateUserInput {
  username: String!
  email: String!
  password: String!
}

input UpdateUserInput {
  username: String
  fullname: String
  email: String
  password: String
  bio: String
  profile: Upload
}

input CreateEventInput {
  title: String!
  description: String!
  category: [String]!
  location: String!
  eventTimestamp: String!
  isActive: Boolean
  price: Float
}

type AuthPayload {
  token: String!
  user: User!
}

type VerificationPayload {
  success: Boolean
}

type SignupPayload {
  message: String!
}

type BookingPayload {
  event: Event!
  message: String!
}

type CreateCustomerPayload {
  message: String!
}

type AddPaymentCardPayload {
  source: String!
}
